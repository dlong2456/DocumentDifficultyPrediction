package server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import org.eclipse.jetty.websocket.api.Session;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;
import org.eclipse.jetty.websocket.api.annotations.WebSocket;

@WebSocket
public class AMyWebSocket implements MyWebSocket {
	private Session session;
	private AServer server;

	@OnWebSocketClose
	public void onClose(int statusCode, String reason) {
		// Remove this instance of AMyWebScocket form the SocketManager
		SocketManager.getInstance().part(this);
		// Close the server
		server.close();
		System.out.println("Close: statusCode=" + statusCode + ", reason=" + reason);
	}

	@OnWebSocketError
	public void onError(Throwable t) {
		System.out.println("Error: " + t.getMessage());
	}

	@OnWebSocketConnect
	public void onConnect(Session session) {
		this.session = session;
		try {
			// Create a new server socket
			int port = 0; // passing 0 -> it will find any free port
			Thread t = new AServer(port, this);
			// Save the server reference for later use
			SocketManager.getInstance().join(this);
			server = ((AServer) t);
			// Start the server
			t.start();
			Runtime rt = Runtime.getRuntime();
			// Fork a new process and run the PredictionManager
			String strClassPath = System.getProperty("java.class.path");
			Process proc2 = rt
					.exec("java -cp " + strClassPath + " client.ADocumentPredictionManager " + ((AServer) t).getPort());
			// Prepare to read the output and errors generated by proc2
			BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc2.getInputStream()));
			BufferedReader stdError = new BufferedReader(new InputStreamReader(proc2.getErrorStream()));
			Thread stdOutPrinter = new StdOutPrinter(stdInput, stdError);
			stdOutPrinter.start();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// Receives messages from the web client(s)
	@OnWebSocketMessage
	public void onMessage(String message) {
		System.out.println("Message received from web");
		server.sendMessageToClient(message);
	}

	public Session getSession() {
		return session;
	}

	public AServer getServer() {
		return server;
	}

	// Send message to the web client
	public void sendMessage(String message) {
		try {
			getSession().getRemote().sendString(message);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
